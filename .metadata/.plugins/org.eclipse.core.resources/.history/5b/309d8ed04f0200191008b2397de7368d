package generate;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Scanner;
import java.util.Stack;
import java.util.Vector;



public class GeneratePromela{
	public static void main(String args[]) throws FileNotFoundException, UnsupportedEncodingException {
	
		Scanner reader = new Scanner(System.in);  // Reading from System.in
		System.out.print("Numero de vertices:");
		int numvertex = reader.nextInt();
		
		DGraph G = new DGraph(numvertex); // The first node is always the target	 
		
		for(int i=0; i < numvertex; i++) {
			if(i == 0) {
				System.out.println("O vertice 0 (o Target) tem arestas para outros vertices? (1 para sim e 0 para nao): ");
			}
			else {
				System.out.printf("O vertice %d tem arestas para outros vertices? (1 para sim e 0 para nao): ", i);
			}
			int resposta = reader.nextInt();
			if(resposta == 1) {
				System.out.printf("O vertice %d tem arestas para os vertices: ", i);
				String edges = reader.next(); // Scans the next token of the input as an int.
				
				for(int j=0; j < edges.length(); j++) {
					if (Character.isDigit(edges.charAt(j))) {
						G.add_edge(i, Character.getNumericValue(edges.charAt(j)));
						}
					}
			}
			}
		// Perguntar os valores de custo possiveis (nao tem de ser necessariamente {0,1,...,numvertex})
		System.out.println("Insira os valores possiveis dos custos dos contratos: ");
		String StringCustos = reader.next();
		LinkedList<Integer> Custos = new LinkedList<Integer>();
		int Max = Integer.MIN_VALUE;
		for(int j=0; j < StringCustos.length(); j++) {
			if(Character.toString(StringCustos.charAt(j)) == "-") {
				if(Max < - Character.getNumericValue(StringCustos.charAt(j+1))) {
					Max = - Character.getNumericValue(StringCustos.charAt(j+1));
				}
				Custos.add(- Character.getNumericValue(StringCustos.charAt(j+1)));
				}
			
			if (Character.isDigit(StringCustos.charAt(j))) {
				if(Max < Character.getNumericValue(StringCustos.charAt(j))) {
					Max = Character.getNumericValue(StringCustos.charAt(j));
				}
				Custos.add(Character.getNumericValue(StringCustos.charAt(j)));
				}
			}
		// Caminhos Maus do grafo:
		Path badPaths = new Path(numvertex);
		loops(G, badPaths, true);
		
		// Criar o ficheiro em PROMELA
		PrintWriter writer = new PrintWriter("BGP.pml", "UTF-8");
		
		//For each edge create a channel. Each channel sends/receives a pair with elected cost and path to reach the target.
		// Ao mesmo tempo, cria-se ja uma string que vai ser usada para especificar a formula ltl
		String chanWedge = new String();
		for(int i=0; i < numvertex; i++) {
					int [] pais = G.parents(i);
					for(int j=0;j<pais.length;j++) {
						if(chanWedge.length() == 0) {
							chanWedge = chanWedge + "empty(c" + i + pais[j] + ")";
						}
						else {
							chanWedge = chanWedge + " /\\ " + "empty(c" + i + pais[j] + ")";
						}
						writer.printf("chan c%d%d = [1] of {byte,byte}; %n",i,pais[j]); 
						// O canal cxy e de x para y, porque ha uma aresta de y para x.
						// O path x_1 -> ... -> x_n e o numero x_n...x_1.
						}
				}
		// Criar os processos (um para cada vertice de G)
		for(int i=0; i < numvertex; i++) {
			
		if ( i > 0){
			// criar os processos dos vertices que nao sao o target
			writer.printf("active proctype n%d() { %n",i);
			writer.println("byte electNode;");// elected node
			writer.println("byte x;");// cost received/sent
			writer.println("byte path;");// path received/sent
			writer.printf("byte state[%d] paths; %n",numvertex);// array of paths 
			writer.printf("byte state[%d] costs; %n", numvertex); // costs for adjacent nodes
			// inicializar os custos no valor maximo
			for(int p = 0; p < numvertex; p++) {
				writer.printf("costs[%d] = %d; %n", p, Max);
			}
			writer.println("byte min;"); // auxiliary variable to determine the minimum of array costs
			writer.println("do");
			// Receber do canal de algum dos vertices filhos de i.
			LinkedList<Integer> children = G.children(i);
			for( int k = 0; k < children.size(); k++) { 
				int currentChild = children.get(k);
				writer.printf(" 	:: c%d%d ? x, path; %n", currentChild, i);
				// Receber do target e um processo diferente (nao ha contrato e o path e sempre aceite)
				if(currentChild == 0) {
					writer.println(" 		costs[0] = x;");
					// Verificar se o minimo do array costs foi alterado
					writer.println(" 			if");
					writer.println(" 				:: costs[electNode] > costs[0] -> electNode = 0;");
					//Alterar o path e enviar nao-deterministicamente para um no pai
					writer.printf(" 					path = %d * 10; %n",i);
					writer.println(" 					if");
					int[] pais = G.parents(i);
					for(int j =0; j < pais.length; j++) {
						writer.printf(" 						:: c%d%d ! costs[electNode], path %n",i,pais[j]);
					}
 					writer.println(" 					fi");
					writer.println(" 			fi");
				}
				else {
					// Perguntar o contrato entre os dois nos (porque nenhum deles e o target)
					for(int n = 0; n < Custos.size(); n++) {
						System.out.printf("Insira o custo de %d aceder ao target usando %d, quando o custo para este ultimo e %d. %n", i,currentChild, Custos.get(n));
						// Imprimir os custos possiveis (variavel Custos) numa string
						String possiveis = new String();
						for(int p = 0; p < Custos.size(); p++) {
							if(p == 0) {
								possiveis = Integer.toString(Custos.get(p));
							}else {
								possiveis = possiveis + ", " + Custos.get(p);
							}
						}
						System.out.printf("Os valores possiveis sao: %s %n", possiveis);
						System.out.println("Insira o custo aqui: ");
						int newcost = reader.nextInt();
						int oldcost = Custos.get(n);
						// Verificar o path
						ArrayList<LinkedList<Integer>> currentPaths = badPaths.get_path(i);
						writer.println(" 	if");
						for(int p = 0; p < currentPaths.size(); p++) {
							LinkedList<Integer> pathList = currentPaths.get(p);
							int pathInt = 0;
							for(int m = 0; m < pathList.size()-1/* -1 para retirar o ultimo no (o repetido)*/; m++) {
								pathInt = pathInt + pathList.get(m)*10^m;
							}
							writer.printf(" 		:: path == %d -> %n", pathInt);
							// Caso em que o path nao e aceite:
							writer.println( 		"if"); // Se ele era o no mais barato entao tem de se ver qual e o mais barato a seguir dele.
							writer.printf(" 			:: electNode == %d -> %n", i);
							// determinar um outro 'minimo' - percorrer o array costs
							writer.println(" 			x = 1;");
							writer.println(" 			min = costs[0];");
							writer.println(" 			do");
							writer.printf(" 				:: x >= %d -> break %n",numvertex);
							writer.printf(" 				:: costs[x] < min && x!=%d -> min = costs[x]; electNode = x; x = x+1 %n",i);
							writer.println(" 				:: x = x+1");
							writer.println(" 			od");
							writer.println(" 		fi");
							writer.println(" 		if");
							writer.printf(" 			:: electNode != %d -> path = paths[electNode]; %n", i,i);
							// Alterar o path 
							writer.println(" 					x = 0;"); // x e um counter que determina o tamanho do caminho path
							writer.println(" 					min = path;"); // Aqui min e so uma variavel auxiliar que nada tem a ver com o valor minimo
							writer.println(" 					do");
							writer.println(" 						:: min == 0 -> break");
							writer.println(" 						:: min = (min - (min % 10))/10; x = x+1");
							writer.println(" 					od");
							writer.printf(" 					path = %d * 10^x + path; %n",i);
							// Enviar nao-deterministicamente para um no pai
							writer.println(" 			if");
							int[] pais = G.parents(i);
							for(int j =0; j < pais.length; j++) {
								writer.printf(" 			:: c%d%d ! costs[electNode], path %n",i,pais[j]);
							}
							writer.println(" 			fi");
							writer.println( 		"fi");
						}
						// Caso em que o path e aceite:
						writer.println(" 		:: else ->");
						writer.println(" 		if");
						writer.printf(" 		:: x == %d -> costs[%d] = %d; %n",oldcost,currentChild,newcost);
						// Verificar se o minimo do array costs foi alterado
						writer.println(" 			if");
						writer.printf(" 				:: costs[electNode] > costs[%d] -> electNode = %d; %n",currentChild,currentChild);
						//Alterar o path e enviar nao-deterministicamente para um no pai
						writer.println(" 					x = 0;"); // x e um counter que determina o tamanho do caminho path
						writer.println(" 					min = path;"); // Aqui min e so uma variavel auxiliar que nada tem a ver com o valor minimo
						writer.println(" 					do");
						writer.println(" 						:: min == 0 -> break");
						writer.println(" 						:: min = (min - (min % 10))/10; x = x+1");
						writer.println(" 					od");
						writer.printf(" 					path = %d * 10^x + path %n",i);
						writer.println(" 					if");
						int[] pais = G.parents(i);
						for(int j =0; j < pais.length; j++) {
							writer.printf(" 						:: c%d%d ! costs[electNode], path; %n",i,pais[j]);
						}
	 					writer.println(" 					fi");
						writer.println(" 			fi");
						
						writer.println(" 		fi");
						writer.println(" 	fi");
				
					}				
				}
				}
		writer.println("od ");
			
		}else {// criar o processo do Target 
			writer.println("active proctype n0() { ");
			// enviar para todos os nos que sao pais do target
			int[] pais = G.parents(0);
			for(int j = 0; j < pais.length; j++) {	
				System.out.printf("Insira o custo de %d aceder ao target diretamente.%n",pais[j]);
				// Imprimir os custos possiveis (variavel Custos) numa string
				String possiveis = new String();
				for(int p = 0; p < Custos.size(); p++) {
					if(p == 0) {
						possiveis = Integer.toString(Custos.get(p));
					}else {
						possiveis = possiveis + ", " + Custos.get(p);
					}
				}
				System.out.printf("Os valores possiveis sao: %s %n", possiveis);
				System.out.println("Insira o custo aqui: ");
				int cost = reader.nextInt();
				writer.printf("c0%d ! %d, 0; %n", pais[j],cost);
			}
				}
		}
		// ltl specification of convergence
		writer.printf("ltl { <> [] ( %s ) }",chanWedge);
		
		//once finished
		reader.close();	
		writer.close();	
		}


	// FIM
	
	
	// Funcoes para encontrar todos os caminhos problematicos do grafo:
	
	
	/**
 	* Gets and prints all loops from the vertex s to d of the Graph G 
 	* @param G : Graph G
 	* @param badPaths : stores all the bad paths 
 	* @param loop : is true if we are looking for a loop
 	* @return
 	*/	
    public static void loops(DGraph G, Path badPaths, Boolean loop)  
    { 
    	LinkedList<Integer> aux = new LinkedList<Integer>();
    	aux.add(0);
		for( int k : G.children(0) ) {
			aux.add(k);
			printLoops(k, G, badPaths, true, aux); 
			aux.removeFirstOccurrence(k);
			}	
		
		for ( int i = 1; i < badPaths.size(); i++) {
			for( LinkedList<Integer> aux1 : badPaths.get_path(i) ) {    System.out.println(aux1 + "\n\n");  }
		}
    } 
	
	
	/**
 	* Algorithm to retrieve all loops from the vertex s to d of the Graph G 
 	* @param s : vertex
 	* @param numvertex : number of vertex
 	* @param G : Graph G
 	* @param badPaths : stores all the bad paths starting in vertex s ( loops in s )
 	* @param loop : is true if we are looking for a loop
 	* @param path : local path
 	* @return
 	*/	
    public static void  printLoops(int s, DGraph G, Path badPaths, Boolean loop, LinkedList<Integer> path )  
    { 
        if ( (G.children(s)).isEmpty() ) { return ; }
    	
    	for( int i : G.children(s)) {
    		if ( path.contains(i) ) { return ; }
    		
    		printAllPaths(i, s, G, badPaths, loop, path);
    		path.add(i);
    		printLoops(i, G, badPaths, loop, path);
    		path.removeFirstOccurrence(i);
    	}
    } 
	
		/**
	 	* Prints all paths from the vertex s to d of the Graph G, where s is different from d 
	 	* @param s : vertex
	 	* @param d : vertex 
	 	* @param numvertex : number of vertex
	 	* @param G : Graph G
	 	* @param Path : stores all the paths
	 	* @param loop : is true if we are looking for a loop
	 	* @return
	 	*/	
	    public static void  printAllPaths(int s, int d , DGraph G, Path badPaths, Boolean loop, LinkedList<Integer> path  )  
	    { 
	        boolean[] isVisited = new boolean[G.size()];
	        isVisited[0] = true;
	        LinkedList<Integer> pathList = new LinkedList<Integer> (); 
	        //add source to path[] 
	        pathList.add(s);     
	        //Call recursive utility 
	        printAllPathsUtil(s, d, isVisited, pathList, G, badPaths, loop, path); 
	    } 
		      
	      
	    /**
	 	* A auxiliary recursive function to print all paths from 'u' to 'd'.
	 	* @param u : source vertex
	 	* @param d : destination vertex
	 	* @param isVisited : keeps track of the visited vertices in current path
	 	* @param localPathList : stores vertices in the current path
	 	* @param G : Graph G 
	 	* @param badPaths : stores all the paths 
	 	* @param loop : is true if we are looking for a loop
	 	* @return
	 	*/	
	    public static void printAllPathsUtil(int u, int d, boolean[] isVisited,
	    LinkedList<Integer> localPathList, DGraph G, Path badPaths, Boolean loop, LinkedList<Integer> path) { 
	    
	    	// Mark the current node 
	         isVisited[u] = true; 
	          
	        if (u == d)  {      
	            if (!loop) { badPaths.add_path(u, localPathList); }
	            else {
	            	LinkedList<Integer> newList = new LinkedList<Integer>(path);
	            	newList.addAll(localPathList);
	            	badPaths.add_path(d, newList);
	            }
	         // if match found then no need to traverse more till depth 
	            isVisited[u]= false; 
	            return ;
	        } 
	        // Recur for all the vertices  
	        // adjacent to current vertex 
	        for (Integer i : G.children(u))  
	        { 
	            if (!isVisited[i]) 
	            { 
	                // store current node  in path[] 
	               localPathList.add(i); 
	               printAllPathsUtil(i, d, isVisited, localPathList, G, badPaths, loop, path); 
	               // remove current node  in path[] 
	               localPathList.remove(i);
	            } 
	        }   
	        // Mark the current node 
	        isVisited[u] = false;
	    } 
	    
}